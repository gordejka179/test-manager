<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Менеджер тестов</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            padding: 20px;
        }
        .frame {
            display: flex;
            width: 900px;
            height: 600px;
            border: 2px solid #333;
            border-radius: 8px;
            overflow: hidden;
            background-color: white;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        .sidebar {
            width: 30%;
            background-color: #f0f0f0;
            padding: 20px;
            border-right: 1px solid #ddd;
            overflow-y: auto;
        }
        .content {
            width: 70%;
            padding: 20px;
            overflow-y: auto;
        }
        h2 {
            margin-top: 0;
            color: #333;
        }
        .new-test-btn {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .new-test-btn:hover {
            background-color: #45a049;
        }

        .new-config-btn {
            position: absolute;
            right: 10px;
            top: 10px;
            padding: 2px 6px;
            background-color: #2196F3;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .new-config-btn:hover {
            background-color: #0b7dda;
        }


        .test-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .test-list li {
            padding: 12px 15px;
            border-bottom: 1px solid #ddd;
            cursor: pointer;
            transition: background-color 0.3s;
            position: relative;
            padding-right: 50px;
        }
        .test-item:hover {
            background-color: #e0e0e0;
        }

        .test-item.active {
            background-color: #e0e0e0;
            font-weight: bold;
        }

        .config-item:hover {
            background-color: #c0c0c0;
        }

        .config-item.active {
            background-color: #b0b0b0;
        }

        .config-list {
            list-style-type: none;
            padding-left: 0;      
        }

        .test-description {
            padding: 15px;
        }

        .file-info { 
            margin-top: 10px;
            padding: 10px;
            background-color: #f8f8f8;
            border-radius: 4px;
        }
        .download-btn {
            display: inline-block;
            margin-top: 10px;
            padding: 8px 12px;
            background-color: #2196F3;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-size: 14px;
        }
        .download-btn:hover {
            background-color: #0b7dda;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            border-radius: 5px;
        }
        .closeTestModal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .closeTestModal:hover {
            color: black;
        }

        .closeConfigModal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .closeConfigModal:hover {
            color: black;
        }

        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group input,
        .form-group textarea,
        .form-group .file-input-wrapper {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .file-input-wrapper {
            position: relative;
        }
        .file-input-wrapper input[type="file"] {
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        .file-input-label {
            display: block;
            padding: 8px;
            background-color: #f0f0f0;
            border: 1px dashed #ccc;
            text-align: center;
            cursor: pointer;
        }
        .file-input-label:hover {
            background-color: #e0e0e0;
        }
        .submit-btn {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .submit-btn:hover {
            background-color: #45a049;
        }
        .error-message {
            color: #d9534f;
            font-size: 14px;
            margin-top: 5px;
        }


        .content .run-config-btn {
            position: absolute;
            right: 20px;
            bottom: 20px;
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            z-index: 10;
        }

        .content .run-config-btn:hover {
            background-color: #45a049;
        }

        .content {
            position: relative;
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="frame">
            <div class="sidebar">
                <h2>Мои тесты</h2>
                <button id="newTestBtn" class="new-test-btn">Новый тест</button>
                <ul id="testList" class="test-list">
                    <!-- Тесты будут добавляться сюда динамически -->
                </ul>
            </div>
            <div class="content">
                <div id="testDescription" class="test-description">
                    <p>Выберите тест из списка или создайте новый.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Модальное окно для нового теста -->
    <div id="newTestModal" class="modal">
    <div class="modal-content">
        <span class="closeTestModal">&times;</span>
        <h2>Создать новый тест</h2>
        <form id="testForm">
            <div class="form-group">
                <label for="testName">Название теста:</label>
                <input type="text" id="testName" required>
            </div>
            <div class="form-group">
                <label for="configType">Тип конфигурации:</label>
                <select id="configType" name="configType" class="form-select" required>
                    <option value="" disabled selected>Выберите тип...</option>
                    <option value="toml">TOML</option>
                    <option value="viper">Viper</option>
                </select>
            </div>
            <div class="form-group">
                <label>Файл теста:</label>
                <div class="file-input-wrapper">
                    <input type="file" id="testFile" name="testFile" required>
                    <label for="testFile" class="file-input-label">Выберите файл с компьютера</label>
                </div>
                <div id="fileInfo" class="file-info" style="display: none;">
                    Выбранный файл: <span id="fileName"></span> (<span id="fileSize"></span> KB)
                </div>
                <div id="fileError" class="error-message" style="display: none;"></div>
            </div>
            <button type="submit" class="submit-btn">Создать тест</button>
        </form>
    </div>
</div>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const testList = document.getElementById('testList');
            const testDescription = document.getElementById('testDescription');
            const newTestBtn = document.getElementById('newTestBtn');
            const newTestModal = document.getElementById('newTestModal');
            const closeTestModalBtn = document.querySelector('.closeTestModal');
            const testForm = document.getElementById('testForm');
            const testFileInput = document.getElementById('testFile');
            const fileInputLabel = document.querySelector('.file-input-label');
            const fileInfo = document.getElementById('fileInfo');
            const fileName = document.getElementById('fileName');
            const fileSize = document.getElementById('fileSize');
            const fileError = document.getElementById('fileError');
            
            const configFileInput = document.getElementById('configFile');
            const configInputLabel = document.getElementById('configInputLabel');

            
            // Переменная для хранения текущего выбранного теста
            let currentSelectedTest = null;

            // Загрузить тесты с сервера при загрузке страницы
            let tests = [];
            
            async function fetchTests() {
                try {
                    const response = await fetch('/home/tests');
                    if (!response.ok) {
                        throw new Error('Ошибка при загрузке тестов');
                    }
                    tests = await response.json();
                    if (tests === null){
                        tests = []
                    }
                    loadTests();
                    
                    //Получаем с сервера конфиги ко всем тестам
                    await getConfigsToAllTests()

                    // Показать первый тест, если есть
                    if (tests && tests.length > 0) {
                        showTestDescription(tests[0]);
                    }

                } catch (error) {
                    console.error('Ошибка:', error);
                    testDescription.innerHTML = `<p style="color: red;">Ошибка при загрузке тестов: ${error.message}</p>`;
                }
            }
            
            // Загрузка тестов в боковую панель
            function loadTests() {
            
                testList.innerHTML = '';
                if (tests != null){
                    tests.forEach(test => {
                        const li = document.createElement('li');
                        li.className = 'test-item'
                        li.textContent = test.name;
                        li.dataset.id = test.name;
                        li.addEventListener('click', () => showTestDescription(test));

                        const configUl = document.createElement('ul');
                        configUl.className = 'config-list';
                        configUl.dataset.testId = test.name;
                        
                        li.appendChild(configUl);
                        testList.appendChild(li);
                        
                            
                    });
                }
            }
            
            
            // Показать описание теста в основной области
            function showTestDescription(test) {
                // Удалить активный класс у всех элементов
                document.querySelectorAll('.test-item, .config-item').forEach(item => {
                    item.classList.remove('active');
                });
                
                // Добавить активный класс выбранному элементу
                const selectedItem = document.querySelector(`.test-list li[data-id="${test.name}"]`);
                if (selectedItem) {
                    selectedItem.classList.add('active');
                    currentSelectedTest = test
                }
                

                // Создать ссылку для скачивания файла
                let fileContent = '';
                if (test.binary) {
                    // Преобразуем бинарные данные в Blob и создаем URL для скачивания
                    const binaryString = atob(test.binary);
                    const bytes = new Uint8Array(binaryString.length);
                    for (let i = 0; i < binaryString.length; i++) {
                        bytes[i] = binaryString.charCodeAt(i);
                    }
                    const blob = new Blob([bytes], { type: 'application/octet-stream' });
                    const fileUrl = URL.createObjectURL(blob);
                    
                    fileContent = `
                        <div class="file-info">
                            <strong>Прикреплённый файл:</strong> ${test.name}
                            <strong>Формат конфигов к тесту:</strong> ${test.config_type}
                            <a href="${fileUrl}" download="${test.name}" class="download-btn">Скачать файл</a>
                        </div>
                    `;
                }

                if (test.config_type === "toml"){ 
                testDescription.innerHTML = `
                        <h2>${test.name}</h2>
                        ${fileContent}
                        <div class="config-form">
                        <h3>Конфигурация</h3>
                            <form id="configForm">
                                <div class="form-group">
                                    <label for="configName">configName:</label>
                                    <input type="text" id="configName" value="example">
                                </div>
                                <fieldset>
                                    <legend>Database Settings</legend>
                                    <div class="form-group">
                                        <label for="dbHosts">Hosts (comma separated):</label>
                                        <input type="text" id="dbHosts" value='["mongodb1.example.com:27017", "mongodb2.example.com:27017"]'>
                                    </div>
                                    <div class="form-group">
                                        <label for="dbUser">User:</label>
                                        <input type="text" id="dbUser" value="admin">
                                    </div>
                                    <div class="form-group">
                                        <label for="dbPassword">Password:</label>
                                        <input type="password" id="dbPassword" value="securepassword">
                                    </div>
                                    <div class="form-group">
                                        <label for="dbName">Database Name:</label>
                                        <input type="text" id="dbName" value="my_database">
                                    </div>
                                    <div class="form-group">
                                        <label for="dbConfigPath">DB Config Path:</label>
                                        <input type="text" id="dbConfigPath" value="/path/to/db_config.yml">
                                    </div>
                                </fieldset>
                    
                                <fieldset>
                                    <legend>Runtime Parameters</legend>
                                    <div class="form-group">
                                        <label for="runMode">Mode (5=CheckAllKeys, 6=CheckAllFields):</label>
                                        <input type="number" id="runMode" value="5" min="5" max="6">
                                    </div>
                                    <div class="form-group">
                                        <label for="readerGoroutines">Reader Goroutines:</label>
                                        <input type="number" id="readerGoroutines" value="4" min="1">
                                    </div>
                                    <div class="form-group">
                                        <label for="consumerGoroutines">Consumer Goroutines:</label>
                                    <input type="number" id="consumerGoroutines" value="8" min="1">
                                    </div>
                                </fieldset>
                    
                                <fieldset>
                                    <legend>Logging Configuration</legend>
                                    <div class="form-group">
                                        <label for="invalidFieldsLog">Invalid Fields Log:</label>
                                        <input type="text" id="invalidFieldsLog" value="/var/log/myapp/invalid_fields.log">
                                    </div>
                                    <div class="form-group">
                                        <label for="missingDocsLog">Missing Docs Log:</label>
                                        <input type="text" id="missingDocsLog" value="/var/log/myapp/missing_docs.log">
                                    </div>
                                </fieldset>

                                <div class="form-actions">
                                    <button type="button" class="save-btn" onclick="saveConfig()">Save Config</button>
                                </div>
                            </form>
                        </div>

                        
                `;
                }
                if (test.config_type === "viper"){ 
                testDescription.innerHTML = `
                        <h2>${test.name}</h2>
                        ${fileContent}
                        <div class="config-form">
                        <h3>Конфигурация</h3>
                            <form id="configForm">
                                <fieldset>
                                    <legend>Database Settings</legend>
                                    <div class="form-group">
                                        <label for="configName">configName:</label>
                                        <input type="text" id="configName" value="example">
                                    </div>
                                    <div class="form-group">
                                        <label for="dbHosts">Hosts (comma separated):</label>
                                        <input type="text" id="dbHosts" value='["mongodb1.example.com:27017", "mongodb2.example.com:27017"]'>
                                    </div>
                                    <div class="form-group">
                                        <label for="dbUser">User:</label>
                                        <input type="text" id="dbUser" value="admin">
                                    </div>
                                    <div class="form-group">
                                        <label for="dbPassword">Password:</label>
                                        <input type="password" id="dbPassword" value="securepassword">
                                    </div>
                                    <div class="form-group">
                                        <label for="dbName">Database Name:</label>
                                        <input type="text" id="dbName" value="my_database">
                                    </div>
                                    <div class="form-group">
                                        <label for="dbConfigPath">DB Config Path:</label>
                                        <input type="text" id="dbConfigPath" value="/path/to/db_config.yml">
                                    </div>
                                </fieldset>
                    
                                <fieldset>
                                    <legend>Runtime Parameters</legend>
                                    <div class="form-group">
                                        <label for="runMode">Mode (5=CheckAllKeys, 6=CheckAllFields):</label>
                                        <input type="number" id="runMode" value="5" min="5" max="6">
                                    </div>
                                    <div class="form-group">
                                        <label for="readerGoroutines">Reader Goroutines:</label>
                                        <input type="number" id="readerGoroutines" value="4" min="1">
                                    </div>
                                    <div class="form-group">
                                        <label for="consumerGoroutines">Consumer Goroutines:</label>
                                    <input type="number" id="consumerGoroutines" value="8" min="1">
                                    </div>
                                </fieldset>
                    
                                <fieldset>
                                    <legend>Logging Configuration</legend>
                                    <div class="form-group">
                                        <label for="invalidFieldsLog">Invalid Fields Log:</label>
                                        <input type="text" id="invalidFieldsLog" value="/var/log/myapp/invalid_fields.log">
                                    </div>
                                    <div class="form-group">
                                        <label for="missingDocsLog">Missing Docs Log:</label>
                                        <input type="text" id="missingDocsLog" value="/var/log/myapp/missing_docs.log">
                                    </div>
                                </fieldset>

                                <div class="form-actions">
                                    <button type="button" class="save-btn" onclick="saveConfig()">Save Config</button>
                                </div>
                            </form>
                        </div>

                        
                `;
                }
            }

            window.saveConfig = async function () {
                test = currentSelectedTest
                const testName = test.name;
                const configType = test.config_type;

                const configName = document.querySelector(`.form-group input[id=configName]`).value;
                const hosts = document.getElementById('dbHosts').value;
                const user = document.getElementById('dbUser').value;
                const password = document.getElementById('dbPassword').value;
                const dbName = document.getElementById('dbName').value;
                const dbConfig = document.getElementById('dbConfigPath').value;

                const mode = document.getElementById('runMode').value;
                const readerGoroutines = document.getElementById('readerGoroutines').value;
                const consumerGoroutines = document.getElementById('consumerGoroutines').value;

                const invalidFieldsLog = document.getElementById('invalidFieldsLog').value;
                const missingDocsImportedLog = document.getElementById('missingDocsLog').value;


                try {
                    // Создаем FormData для отправки конфига
                    const formData = new FormData();
                    formData.append('test_name', testName);
                    formData.append('config_name', configName);
                    formData.append('config_type', configType);
                    formData.append('hosts', hosts);
                    formData.append('user', user);
                    formData.append('password', password);
                    formData.append('db_name', dbName);
                    formData.append('db_config', dbConfig);
                    formData.append('mode', mode);
                    formData.append('reader_goroutines', readerGoroutines);
                    formData.append('consumer_goroutines', consumerGoroutines);
                    formData.append('invalid_fields_Log', invalidFieldsLog);
                    formData.append('missing_docs_imported_log', missingDocsImportedLog);


                    // Отправляем POST-запрос
                    const response = await fetch('/home/tests/newConfig', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (!response.ok) {
                        throw new Error('Ошибка при создании конфига');
                    }

                    // Получаем созданный конфиг с сервера
                    const newConfig = await response.json();


                    const configLi = document.createElement('li');
                    configLi.className = 'config-item';
                    configLi.dataset.id = newConfig.id;
                    configLi.textContent = newConfig.name;
                    console.log(newConfig.name)
                    configLi.addEventListener('click', (e) => {
                        e.stopPropagation();
                        showConfigDescription(newConfig);
                    });

                    const config_ul = document.querySelector(`.test-list li[data-id="${newConfig.test_name}"] .config-list`);
                    config_ul.appendChild(configLi)

                } catch (error) {
                        console.error('Ошибка:', error);
                        testDescription.innerHTML = `<p style="color: red;">Ошибка при загрузке конфигов к тесту: ${error.message}</p>`;
                }  
                    
                        
            }
            
            // Обработчик нажатия кнопки "Новый тест"
            newTestBtn.addEventListener('click', function() {
                newTestModal.style.display = 'block';
            });
            
            // Закрыть модальное окно с новым тестом
            closeTestModalBtn.addEventListener('click', function() {
                newTestModal.style.display = 'none';
                resetTestForm();
            });
            
            // Закрыть модальное окно с тестом при клике снаружи
            window.addEventListener('click', function(event) {
                if (event.target === newTestModal) {
                    newTestModal.style.display = 'none';
                    resetTestForm();
                }
            });
            
            // Сбросить форму с тестом
            function resetTestForm() {
                testForm.reset();
                fileInfo.style.display = 'none';
                fileError.style.display = 'none';
                fileInputLabel.textContent = 'Выберите файл с компьютера';
            }
            
            // Обработчик выбора файла с тестом
            testFileInput.addEventListener('change', function(e) {
                fileError.style.display = 'none';
                
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    
                    fileName.textContent = file.name;
                    fileSize.textContent = Math.round(file.size / 1024);
                    fileInfo.style.display = 'block';
                    fileInputLabel.textContent = 'Изменить выбранный файл';
                }
            });
            
            // Обработчик отправки формы с тестом с POST-запросом
            testForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const testName = document.getElementById('testName').value;
                const file = testFileInput.files[0];
                const configType = document.getElementById('configType').value;
            

                
                try {
                    
                    // Создаем FormData для отправки файла
                    const formData = new FormData();
                    formData.append('name', testName);
                    formData.append('file', file);
                    formData.append('configType', configType);
                    
                    // Отправляем POST-запрос
                    const response = await fetch('/home/tests/newTest', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (!response.ok) {
                        throw new Error('Ошибка при создании теста');
                    }
                    
                    
                    // Получаем созданный тест с сервера
                    const newTest = await response.json();
                    
                    // Добавляем тест в список
                    tests.push(newTest);


                    //Для нового теста добавляем ему свойства и массив из конфигов
                    const li = document.createElement('li');
                    li.textContent = newTest.name;
                    li.dataset.id = newTest.name;
                    li.className = 'test-item'
                    li.addEventListener('click', () => showTestDescription(newTest));

                    const configUl = document.createElement('ul');
                    configUl.className = 'config-list';
                    configUl.dataset.testId = newTest.name;
                    li.appendChild(configUl);
                    testList.appendChild(li);
                    


                    showTestDescription(newTest);
                    
                    // Сбросить форму и закрыть модальное окно
                    resetTestForm();
                    newTestModal.style.display = 'none';
                    
                } catch (error) {
                    console.error('Ошибка:', error);
                    fileError.textContent = `Ошибка при создании теста: ${error.message}`;
                    fileError.style.display = 'block';
                }
            });
            

            // Обработчик отправки формы с конфигом с POST-запросом


            function showConfigDescription(config) {
                // Удалить активный класс у всех элементов
                document.querySelectorAll('.test-item, .config-item').forEach(item => {
                    item.classList.remove('active');
                });
                
                // Добавить активный класс выбранному элементу
                const selectedConfig = document.querySelector(`.config-item[data-id="${config.id}"]`);
                if (selectedConfig) {
                    selectedConfig.classList.add('active');
                    const parentTestItem = selectedConfig.closest('.test-item');
                    if (parentTestItem) {
                        parentTestItem.classList.add('active');
                    }
                }

                if (config.config_type === "toml") {
                    const configContent = `
                        <div class="config-display">
                            <h3>Конфиг: ${config.name}</h3>
    
                            <div class="config-section">
                                <h4>Основные параметры</h4>
                                <div class="config-row">
                                    <span class="config-label">Config Name:</span>
                                    <span class="config-value">${config.name}</span>
                                </div>
                                <div class="config-row">
                                    <span class="config-label">Config Type:</span>
                                    <span class="config-value">${config.config_type}</span>
                                </div>
                            </div>

                            <div class="config-section">
                                <h4>Настройки базы данных</h4>
                                <div class="config-row">
                                    <span class="config-label">Hosts:</span>
                                    <span class="config-value">${Array.isArray(config.hosts) ? config.hosts.join(', ') : config.hosts}</span>
                                </div>
                                <div class="config-row">
                                    <span class="config-label">User:</span>
                                    <span class="config-value">${config.user}</span>
                                </div>
                                <div class="config-row">
                                    <span class="config-label">Password:</span>
                                    <span class="config-value">${config.password}</span>
                                </div>
                                <div class="config-row">
                                    <span class="config-label">DB Name:</span>
                                    <span class="config-value">${config.db_name}</span>
                                </div>
                                <div class="config-row">
                                    <span class="config-label">DB Config Path:</span>
                                    <span class="config-value">${config.db_config}</span>
                                </div>
                            </div>

                            <div class="config-section">
                                <h4>Параметры выполнения</h4>
                                <div class="config-row">
                                    <span class="config-label">Mode:</span>
                                    <span class="config-value">${config.mode}</span>
                                </div>
                                <div class="config-row">
                                    <span class="config-label">Reader Goroutines:</span>
                                    <span class="config-value">${config.reader_goroutines}</span>
                                </div>
                                <div class="config-row">
                                    <span class="config-label">Consumer Goroutines:</span>
                                    <span class="config-value">${config.consumer_goroutines}</span>
                                </div>
                            </div>

                            <div class="config-section">
                                <h4>Настройки логирования</h4>
                                <div class="config-row">
                                    <span class="config-label">Invalid Fields Log:</span>
                                    <span class="config-value">${config.invalid_fields_log}</span>
                                </div>
                                <div class="config-row">
                                    <span class="config-label">Missing Docs Log:</span>
                                    <span class="config-value">${config.missing_docs_imported_log}</span>
                                </div>
                            </div>
                        </div>
                        <button class="run-config-btn" onclick="runConfig('${config.id}')">RUN</button>

                    `;
    
                    // Обновляем содержимое
                    testDescription.innerHTML = `
                        <h2>${config.name}</h2>
                        ${configContent}
                    `;
                    
                }
                

            }

            async function getConfigsToAllTests() {
                for (let j = 0; j < tests.length; j++) {
                    let test = tests[j]
                    try {
                        const formData = new FormData();
                        formData.append('testName', test.name);

                        const response = await fetch('/home/tests/configsToTest', {
                        method: 'POST', 
                        body: formData
                        })


                        if (!response.ok) {
                            throw new Error('Ошибка при загрузке конфигов к тесту');
                        }
                        let configs = await response.json();
                        if (configs === null){
                            configs = []
                        }

                        for (let i = 0; i < configs.length; i++) {
                            let config = configs[i]
                            const config_ul = document.querySelector(`.test-list li[data-id="${config.test_name}"]`);

                            const configLi = document.createElement('li');
                            configLi.className = 'config-item';
                            configLi.dataset.id = config.id;
                            configLi.textContent = config.name;
                            console.log(config)
                            console.log(config.name)
                            configLi.addEventListener('click', (e) => {
                                e.stopPropagation();
                                showConfigDescription(config);
                            });
                            config_ul.appendChild(configLi)
                            
                        }  
                    } catch (error) {
                        console.error('Ошибка:', error);
                        testDescription.innerHTML = `<p style="color: red;">Ошибка при загрузке конфигов к тесту: ${error.message}</p>`;
                    }
                        
                } 
            }

  
            // Инициализация страницы - загрузка тестов и конфигов к ним
            fetchTests();
                     
        });

    </script>
</body>
</html>