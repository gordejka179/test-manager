<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Менеджер тестов</title>
    <!-- Materialize CSS -->
    <!--<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">-->
    <!-- Material Icons -->
    <!--<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"> -->
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            padding: 20px;
        }
        .frame {
            display: flex;
            width: 900px;
            height: 600px;
            border: 2px solid #333;
            border-radius: 8px;
            overflow: hidden;
            background-color: white;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        .sidebar {
            width: 30%;
            background-color: #f0f0f0;
            padding: 20px;
            border-right: 1px solid #ddd;
            overflow-y: auto;
        }

        .new-test-btn {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .new-test-btn:hover {
            background-color: #45a049;
        }

        .new-config-btn {
            position: absolute;
            right: 10px;
            top: 10px;
            padding: 2px 6px;
            background-color: #2196F3;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .new-config-btn:hover {
            background-color: #0b7dda;
        }


        .test-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .test-list li {
            padding: 12px 15px;
            border-bottom: 1px solid #ddd;
            cursor: pointer;
            transition: background-color 0.3s;
            position: relative;
            padding-right: 50px;
        }
        .test-item:hover {
            background-color: #e0e0e0;
        }

        .test-item.active {
            background-color: #e0e0e0;
            font-weight: bold;
        }


        .log-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .log-list li {
            padding: 12px 15px;
            border-bottom: 1px solid #ddd;
            cursor: pointer;
            transition: background-color 0.3s;
            position: relative;
            padding-right: 50px;
        }
        .log-item:hover {
            background-color: #e0e0e0;
        }

        .log-item.active {
            background-color: #e0e0e0;
            font-weight: bold;
        }


        .config-item {
            line-height: 1.2;
        }

        .config-item:hover {
            background-color: #c0c0c0;
        }

        .config-item.active {
            background-color: #b0b0b0;
        }

        .config-list {
            list-style-type: none;
            padding-left: 0;      
        }

        .test-description {
            display: flex;
            flex-direction: column;
            min-height: 100%; 
            position: relative; 
            padding-bottom: 5px;
        }

        .file-info { 
            margin-top: 10px;
            padding: 10px;
            background-color: #f8f8f8;
            border-radius: 4px;
        }
        .download-btn {
            display: inline-block;
            margin-top: 10px;
            padding: 8px 12px;
            background-color: #2196F3;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-size: 14px;
        }
        .download-btn:hover {
            background-color: #0b7dda;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            border-radius: 5px;
        }
        .closeTestModal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .closeTestModal:hover {
            color: black;
        }

    
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group input,
        .form-group textarea,
        .form-group .file-input-wrapper {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .file-input-wrapper {
            position: relative;
        }
        .file-input-wrapper input[type="file"] {
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        .file-input-label {
            display: block;
            padding: 8px;
            background-color: #f0f0f0;
            border: 1px dashed #ccc;
            text-align: center;
            cursor: pointer;
        }
        .file-input-label:hover {
            background-color: #e0e0e0;
        }
        .submit-btn {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .submit-btn:hover {
            background-color: #45a049;
        }
        .error-message {
            color: #d9534f;
            font-size: 14px;
            margin-top: 5px;
        }


        .content {
            position: relative;
            width: 70%;
            padding: 20px;
            overflow-y: auto;
            min-height: 100%;
            box-sizing: border-box;
        }

        .run-btn {
            display: inline-block;
            padding: 8px 16px;  
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;  
        }  

        .run-btn:hover {
            background-color: #45a049;
        }


        .test-description {
            position: relative;
        }
    
        .history-btn {
            position: absolute;
            right: 0px;
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            z-index: 10;
        }

        .history-btn:hover {
            background-color: #45a049;
        }


        h4{
            margin-top: 7px;
            margin-bottom: 7px;
        }

        .modal-history-content {
            background-color: #fefefe;
            margin: 10% auto; 
            padding: 20px;
            border: 1px solid #888;
            width: 50%; 
            border-radius: 5px;
            max-height: 80vh; 
            overflow-y: auto; 
        }

        .delete-test-btn {
            display: inline-block;
            padding: 8px 16px;  
            background-color: #f50723ff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;  
            margin-left: auto;
            margin-top: 10px;
        }  

        .delete-test-btn:hover {
            background-color: #b31313ff;
        }

        .delete-config-btn {
            display: inline-block;
            padding: 8px 16px;  
            background-color: #f50723ff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: auto;
            margin-top: 10px;  
        }  

        .delete-config-btn:hover {
            background-color: #b31313ff;
        }

        .save-config-btn {
            display: inline-block;
            padding: 8px 16px;  
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;  
        }  

        .save-config-btn:hover {
            background-color: #45a049;
        }


        .btn-container {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            width: 100%;
        }

        .config-form label {
            display: inline-block;
            min-width: 180px;
            margin-right: 10px;
            vertical-align: top;
        }

        .config-form input[type="text"] {
            display: inline-block;
            margin-bottom: 8px;
            vertical-align: top;
        }

        .config-form fieldset {
            margin-bottom: 15px;
            padding: 10px;
        }

        .config-form legend {
            font-weight: bold;
            padding: 0 5px;
        }

        #fileImportConfigInput {
            display: none;
        }

        .import-config-btn {
            width: 140px;
            height: 30px;
            margin-left: 10px;
            background-color: #2196F3;
            color: white; 
            border: none;
            border-radius: 4px;
            font-family: Arial, sans-serif;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            text-align: center;
            line-height: 30px; 
        }

        .import-config-btn:hover {
            background-color: #0b7dda;
        }


        .export-btn {
            display: inline-block;
            width: 58px;          
            padding: 8px 12px;
            background-color: #2196F3;
            color: white;
            border: none;
            border-radius: 4px;
            text-decoration: none;
            font-size: 13.333px;
            cursor: pointer;
            margin-left: auto;
            margin-top: 5px;
            display: flex;
            justify-content: center;
            align-items: center; 
        }

        .export-btn:hover {
            background-color: #0b7dda;
        }

        

        

    </style>
</head>
<body>
    <div class="container">
        <div class="frame">
            <div class="sidebar">
                <h2>Мои тесты</h2>
                <button id="newTestBtn" class="new-test-btn">Новый тест</button>
                <ul id="testList" class="test-list">
                    <!-- Тесты будут добавляться сюда динамически -->
                </ul>
            </div>
            <div class="content">
                <div id="testDescription" class="test-description">
                    <p>Выберите тест из списка или создайте новый.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Модальное окно для нового теста -->
    <div id="newTestModal" class="modal">
    <div class="modal-content">
        <span class="closeTestModal">&times;</span>
        <h2>Создать новый тест</h2>
        <form id="testForm">
            <div class="form-group">
                <label for="testName">Название теста:</label>
                <input type="text" id="testName" required>
            </div>
            <div class="form-group">
                <label>Бинарник теста:</label>
                <div class="file-input-wrapper">
                    <input type="file" id="testFile" name="testFile" required>
                    <label for="testFile" class="file-input-label">Выберите файл с компьютера</label>
                </div>
                <div id="testFileInfo" class="file-info" style="display: none;">
                    Выбранный файл: <span id="testFileName"></span> (<span id="testFileSize"></span> KB)
                </div>
                <div id="testFileError" class="error-message" style="display: none;"></div>
            </div>
            <div class="form-group">
                <label>go файл с конфигурацией:</label>
                <div class="file-input-wrapper">
                    <input type="file" id="configFile" name="configFile" required>
                    <label for="configFile" class="file-input-label">Выберите файл с компьютера</label>
                </div>
                <div id="configFileInfo" class="file-info" style="display: none;">
                    Выбранный файл: <span id="configFileName"></span> (<span id="configFileSize"></span> KB)
                </div>
                <div id="configFileError" class="error-message" style="display: none;"></div>
            </div>
            <div class="form-group">
                <label>Название структуры из go файла:</label>
                <input type="text" id="structureName" required>
            </div>

            <button type="submit" class="submit-btn">Создать тест</button>
        </form>
    </div>
    </div>

     <!-- Модальное окно для списка логов -->
    <div id="logModal" class="modal container">
        <div class="frame">
            <span class="closeLogModal">&times;</span>
            <div class="sidebar">
                <div class="log-details" id="logDetails">
                    <p>Выберите лог для просмотра деталей.</p>
                </div>
                <ul class="log-list" id="logList">
                    <!-- Логи будут добавлены динамически -->
                </ul>
            </div>
            <div class="content">
                <div id="logDescription" class="log-description">
                </div>
            </div>
        </div>
    </div>

    <!-- Модальное окно для ввода данных удалённого сервера -->
    <div id="serverModal" class="modal">
        <div class="modal-content" style="width: 400px;">
            <span class="closeServerModal">&times;</span>
            <h2>Введите учетные данные</h2>
            <form id="serverForm">
                <div class="form-group">
                    <label for="serverIp">IP-адрес или DNS-запись сервера, на котором хотим запустить бинарник</label>
                    <input type="text" id="serverIp" required>
                </div>
                <div class="form-group">
                    <label for="username">Имя пользователя на сервере:</label>
                    <input type="text" id="username">
                </div>
                <div class="form-group">
                    <label>Команда, которой запускать бинарник:</label>
                    <input type="text" id="commandTemplate" value='{BIN_FILE} -c {CONFIG}' required>
                </div>
                <button type="submit" class="submit-btn">Подтвердить</button>
            </form>
        </div>
    </div>


    <!-- Модальное окно для подтверждения удаления конфига -->
    <div id="deleteConfigModal" class="modal">
        <div class="modal-content" style="width: 400px;">
            <span class="closeDeleteConfigModal">&times;</span>
            <h2>Подтверждение удаления конфига</h2>
            <form id="deleteConfigForm">
                <button type="submit" class="submit-btn">Подтвердить</button>
            </form>
        </div>
    </div>

    <!-- Модальное окно для подтверждения удаления теста -->
    <div id="deleteTestModal" class="modal">
        <div class="modal-content" style="width: 400px;">
            <span class="closeDeleteTestModal">&times;</span>
            <h2>Подтверждение удаления теста</h2>
            <form id="deleteTestForm">
                <button type="submit" class="submit-btn">Подтвердить</button>
            </form>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const testList = document.getElementById('testList');
            const testDescription = document.getElementById('testDescription');
            const newTestBtn = document.getElementById('newTestBtn');
            const newTestModal = document.getElementById('newTestModal');
            const closeTestModalBtn = document.querySelector('.closeTestModal');
            const testForm = document.getElementById('testForm');
            const testFileInput = document.getElementById('testFile');
            const testFileInputLabel = document.querySelector('label[for="testFile"]');
            const fileInfo = document.getElementById('testFileInfo');
            const testFileName = document.getElementById('testFileName');
            const testFileSize = document.getElementById('testFileSize');
            const testFileError = document.getElementById('testFileError');
            
            const configFileInput = document.getElementById('configFile');
            const configFileInputLabel = document.querySelector('label[for="configFile"]');
            const configInfo = document.getElementById('configFileInfo');
            const configFileName = document.getElementById('configFileName');
            const configFileSize = document.getElementById('configFileSize');
            const configFileError = document.getElementById('configFileError');

            const logList = document.getElementById('logList');
            const logModal = document.getElementById('logModal');

            const serverModal = document.getElementById('serverModal');
            const closeServerModalBtn = document.querySelector('.closeServerModal');
            const serverForm = document.getElementById('serverForm');

            const deleteConfigModal = document.getElementById('deleteConfigModal');
            const closeDeleteConfigModalBtn = document.querySelector('.closeDeleteConfigModal');
            const deleteConfigForm = document.getElementById('deleteConfigForm');

            const deleteTestModal = document.getElementById('deleteTestModal');
            const closeDeleteTestModalBtn = document.querySelector('.closeDeleteTestModal');
            const deleteTestForm = document.getElementById('deleteTestForm');
   
            // Переменная для хранения текущего выбранного теста
            let currentSelectedTest = null;

            // Загрузить тесты с сервера при загрузке страницы
            let tests = [];

            // Глобальная переменная для хранения текущего выбранного конфига
            let configToRun = null;
            
            async function fetchTests() {
                try {
                    const response = await fetch('/home/tests');
                    if (!response.ok) {
                        throw new Error('Ошибка при загрузке тестов');
                    }
                    tests = await response.json();
                    if (tests === null){
                        tests = []
                    }
                    loadTests();
                    
                    //Получаем с сервера конфиги ко всем тестам
                    await getConfigsToAllTests()

                    // Показать первый тест, если есть
                    if (tests && tests.length > 0) {
                        showTestDescription(tests[0]);
                    }

                } catch (error) {
                    console.error('Ошибка:', error);
                    testDescription.innerHTML = `<p style="color: red;">Ошибка при загрузке тестов: ${error.message}</p>`;
                }
            }
            
            // Загрузка тестов в боковую панель
            function loadTests() {
            
                testList.innerHTML = '';
                if (tests != null){
                    tests.forEach(test => {
                        const li = document.createElement('li');
                        li.className = 'test-item'
                        li.textContent = test.name;
                        li.dataset.id = test.name;
                        li.addEventListener('click', () => showTestDescription(test));

                        const configUl = document.createElement('ul');
                        configUl.className = 'config-list';
                        configUl.dataset.testId = test.name;
                        
                        li.appendChild(configUl);
                        testList.appendChild(li);
                        
                            
                    });
                }
            }


            // Создаём форму с полями для конфига
            function generateForm(config, prefix = '', htmlBuilder = []) {
                for (const [key, value] of Object.entries(config)) {
                    const fullKey = prefix ? `${prefix}.${key}` : key;

                    if (typeof value === 'object' && value !== null) {
                        if (Array.isArray(value)) {
                        // Обработка массива - показываем [] в значении
                            htmlBuilder.push(
                                `<label for='${fullKey}'>${key}</label>` +
                                `<input type='text' id='${fullKey}' name='${fullKey}' value='[]'><br>`
                            );
                        } else {
                            // Вложенный объект
                            htmlBuilder.push(`<fieldset><legend>${key}</legend>`);
                            generateForm(value, fullKey, htmlBuilder);
                            htmlBuilder.push('</fieldset>');
                        }
                    } else {
                    // Примитивные значения (строка, число, boolean)
                    htmlBuilder.push(
                        `<label for='${fullKey}'>${key}</label>` +
                        `<input type='text' id='${fullKey}' name='${fullKey}' value='${value}'><br>`
                    );
                    }
                }
            }
            
            // Создаём форму с полями для конфига
            function createHTMLForm(config) {
                const htmlParts = [
                '<form method="POST">',
                '<div class="config-form">',
                ];

                htmlParts.push(
                    `<label for='configName'>configName</label>` +
                    `<input type='text' id='configName' name='config_name' value=''><br>`
                );

                generateForm(config, '', htmlParts);
                htmlParts.push('<div id=btn-container class="btn-container"></div>')
                htmlParts.push('</div>');
                htmlParts.push('</form>');
                return htmlParts.join('\n');
            }
            

            //Создаем HTML с уже заполненными полями
            function generateDescription(config, prefix = '', htmlBuilder = []) {
                for (const [key, value] of Object.entries(config)) {
                    const fullKey = prefix ? `${prefix}.${key}` : key;

                    if (typeof value === 'object' && value !== null) {
                        if (Array.isArray(value)) {
                            htmlBuilder.push(
                                `<label>${key}: </label>` +
                                `<span>${JSON.stringify(value)}</span><br>`
                            );
                        } else {
                            // Вложенный объект
                            htmlBuilder.push(`<fieldset><legend>${key}</legend>`);
                            generateDescription(value, fullKey, htmlBuilder);
                            htmlBuilder.push('</fieldset>');
                        }
                    } else {
                        // Примитивные значения
                        htmlBuilder.push(
                            `<label>${key}: </label>` +
                            `<span>${value}</span><br>`
                        );
                    }
                }
            }


            //Создаем HTML с уже заполненными полями
            function createDescription(config) {
                const htmlParts = [
                    '<div class="config-display">',
                    '<div class="config-content">'
                ];
  
                generateDescription(config, '', htmlParts);
  
                htmlParts.push(
                    '</div>',
                    '</div>'
                );
  
                return htmlParts.join('\n');
            }


            
            // Показать описание теста в основной области
            function showTestDescription(test) {
                // Удалить активный класс у всех элементов
                document.querySelectorAll('.test-item, .config-item').forEach(item => {
                    item.classList.remove('active');
                });
                
                // Добавить активный класс выбранному элементу
                const selectedItem = document.querySelector(`.test-list li[data-id="${test.name}"]`);
                if (selectedItem) {
                    selectedItem.classList.add('active');
                    currentSelectedTest = test
                }
                

                // Создать ссылку для скачивания файла
                let fileContent = '';
                if (test.binary) {
                    // из Base64 декородируем в бинарные данные
                    const binaryString = atob(test.binary);
                    const bytes = new Uint8Array(binaryString.length);
                    for (let i = 0; i < binaryString.length; i++) {
                        bytes[i] = binaryString.charCodeAt(i);
                    }

                    //Преобразуем бинарные данные в Blob и создаем URL для скачивания
                    const blob = new Blob([bytes], { type: 'application/octet-stream' });
                    const fileUrl = URL.createObjectURL(blob);
                    
                    
                    fileContent = `
                        <div class="file-info">
                            <p><strong>Прикреплённый бинарник:</strong> ${test.binary_name}</p>
                            <a href="${fileUrl}" download="${test.binary_name}" class="download-btn">Скачать бинарник</a>
                        </div>
                    `;
                }

                //Создаём форму на основе конфига
                const formHTML = createHTMLForm(test.template);

                testDescription.innerHTML = `
                        ${fileContent}
                        <br>
                        <input type="file" id="fileImportConfigInput">
                        <button id="importConfigBtn" class="import-config-btn">Импорт</button> 
                        <br> 
                        ${formHTML}                    
                `;

                const importConfigBtn = document.getElementById('importConfigBtn');
                const fileInput = document.getElementById('fileImportConfigInput');

                importConfigBtn.addEventListener('click', () => {
                    fileInput.click();
                });

                fileInput.addEventListener('change', async (event) => {
                    const file = event.target.files[0];
                    if (!file) return;
                    const reader = new FileReader();
    
                    reader.onload = (e) => {
                        try {
                            const fileImportContent = e.target.result;   
                            const jsonData = JSON.parse(fileImportContent);
                            console.log('Полученные JSON данные:', jsonData);
                            const formImportHTML = createHTMLForm(jsonData);
                            testDescription.innerHTML = `
                                ${fileContent}
                                <br>  
                                ${formImportHTML}                    
                            `;
                            document.getElementById('btn-container').appendChild(saveConfigBtn);
            
                        } catch (err) {
                            console.error('Ошибка при чтении файла:', err);
                            alert('Файл не содержит валидный JSON');
                        }
                    };

                    reader.readAsText(file);

                });
                



                //Кнопка для сохранения конфига
                const saveConfigBtn = document.createElement('button');
                saveConfigBtn.className = 'save-config-btn';
                saveConfigBtn.textContent = 'Сохранить';

                saveConfigBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    saveConfig();
                });

                //Кнопка для удаления теста
                const deleteTestBtn = document.createElement('button');
                deleteTestBtn.className = 'delete-test-btn';
                deleteTestBtn.textContent = 'Удалить';

                deleteTestBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    openDeleteTestModal(test.name);
                });

                document.getElementById('btn-container').appendChild(saveConfigBtn);
                document.getElementById('btn-container').appendChild(deleteTestBtn);
                
            }

            //Создание нового конфига
            window.saveConfig = async function () {
			
			const form = document.querySelector('.content form');

            const formData = new FormData(form);
            formData.append('test_name', currentSelectedTest.name);
            formData.append('config_type', currentSelectedTest.config_type);
			
			try {
				const response = await fetch('home/tests/newConfig', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded',
					},
					body: new URLSearchParams(formData).toString()
				});
                
                if (!response.ok) {
                    const errorResponse = await response.json();
                    throw new Error(`Ошибка при создании конфига: ${errorResponse.error}`);
                }

                // Получаем созданный конфиг с сервера
                const newConfig = await response.json();


                const configLi = document.createElement('li');
                configLi.className = 'config-item';
                configLi.dataset.id = newConfig.id;
                configLi.textContent = newConfig.name;
                configLi.addEventListener('click', (e) => {
                    e.stopPropagation();
                    showConfigDescription(newConfig);
                });

                console.log(newConfig.test_name)
                const config_ul = document.querySelector(`.test-list li[data-id="${newConfig.test_name}"] .config-list`);
                config_ul.appendChild(configLi);


			} catch (error) {
				console.error('Ошибка:', error);
                testDescription.innerHTML = `<p style="color: red;">Ошибка при создании конфига: ${error.message}</p>`;
			}
            };

             
            
            // Обработчик нажатия кнопки "Новый тест"
            newTestBtn.addEventListener('click', function() {
                newTestModal.style.display = 'block';
            });
            
            // Закрыть модальное окно с новым тестом
            closeTestModalBtn.addEventListener('click', function() {
                newTestModal.style.display = 'none';
                resetTestForm();
            });
            
            // Закрыть модальное окно с тестом при клике снаружи формы
            window.addEventListener('click', function(event) {
                if (event.target === newTestModal) {
                    newTestModal.style.display = 'none';
                    resetTestForm();
                }
            });
            
            // Сбросить форму с тестом
            function resetTestForm() {
                testForm.reset();
                fileInfo.style.display = 'none';
                testFileError.style.display = 'none';
                testFileInputLabel.textContent = 'Выберите файл с компьютера';
                configFileInfo.style.display = 'none'
                configFileError.style.display = 'none';
                configFileInputLabel.textContent = 'Выберите файл с компьютера';
            }
            
            // Обработчик выбора файла с тестом
            testFileInput.addEventListener('change', function(e) {
                testFileError.style.display = 'none';
                
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    
                    testFileName.textContent = file.name;
                    testFileSize.textContent = Math.round(file.size / 1024);
                    testFileInfo.style.display = 'block';
                    testFileInputLabel.textContent = 'Изменить выбранный файл';
                }
            });

            // Обработчик выбора файла с конфигом
            configFileInput.addEventListener('change', function(e) {
                configFileError.style.display = 'none';
                
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    
                    configFileName.textContent = file.name;
                    configFileSize.textContent = Math.round(file.size / 1024);
                    configFileInfo.style.display = 'block';
                    configFileInputLabel.textContent = 'Изменить выбранный файл';
                }
            });
            


            // Обработчик отправки формы с тестом с POST-запросом
            testForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const testName = document.getElementById('testName').value;
                const testFile = testFileInput.files[0];
                const configFile = configFileInput.files[0];
                const structureName = document.getElementById('structureName').value;
                
                try {
                    
                    // Создаем FormData для отправки файла
                    const formData = new FormData();
                    formData.append('name', testName);
                    formData.append('test_file_name', testFile.name);
                    formData.append('test_file', testFile);
                    formData.append('config_file', configFile);
                    formData.append('structure_name', structureName);
                    
                    // Отправляем POST-запрос
                    const response = await fetch('/home/tests/newTest', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (!response.ok) {
                        const errorResponse = await response.json();
                        console.log(errorResponse)
                        throw new Error(`Ошибка при создании теста: ${errorResponse.error}`);
                    }
                    
                    // Получаем созданный тест с сервера
                    const newTest = await response.json();
                    
                    // Добавляем тест в список
                    tests.push(newTest);


                    //Для нового теста добавляем ему свойства и массив из конфигов
                    const li = document.createElement('li');
                    li.textContent = newTest.name;
                    li.dataset.id = newTest.name;
                    li.className = 'test-item'
                    li.addEventListener('click', () => showTestDescription(newTest));

                    const configUl = document.createElement('ul');
                    configUl.className = 'config-list';
                    configUl.dataset.testId = newTest.name;
                    li.appendChild(configUl);
                    testList.appendChild(li);
                    


                    showTestDescription(newTest);
                    
                    // Сбросить форму и закрыть модальное окно
                    resetTestForm();
                    newTestModal.style.display = 'none';
                    
                } catch (error) {
                    console.error('Ошибка:', error);
                    testFileError.textContent = `Ошибка при создании теста: ${error.message}`;
                    testFileError.style.display = 'block';
                }
            });
            

            // Обработчик отправки формы с конфигом с POST-запросом


            function showConfigDescription(config) {
                // Удалить активный класс у всех элементов
                document.querySelectorAll('.test-item, .config-item').forEach(item => {
                    item.classList.remove('active');
                });
                
                // Добавить активный класс выбранному элементу
                const selectedConfig = document.querySelector(`.config-item[data-id="${config.id}"]`);
                if (selectedConfig) {
                    selectedConfig.classList.add('active');
                    const parentTestItem = selectedConfig.closest('.test-item');
                    if (parentTestItem) {
                        parentTestItem.classList.add('active');
                    }
                }


                const configDescription = createDescription(config.content)
                //Кнопка с логами
                const historyBtn = document.createElement('button');
                historyBtn.className = 'history-btn';
                historyBtn.textContent = 'History';
                historyBtn.addEventListener('click', () => getHistoryToConfig(config.id));

                //Кнопка для запуска
                const runBtn = document.createElement('button');
                runBtn.className = 'run-btn';
                runBtn.textContent = 'Запуск';
                runBtn.addEventListener('click', () => openRunModal(config));

                //Кнопка для удаления конфига
                const deleteConfigBtn = document.createElement('button');
                deleteConfigBtn.className = 'delete-config-btn';
                deleteConfigBtn.textContent = 'Удалить';
                deleteConfigBtn.addEventListener('click', () => openDeleteConfigModal(config.id));

                // ссылка для экспорта
                const jsonData = config.content;
                const jsonString = typeof jsonData === 'string' ? jsonData : JSON.stringify(jsonData, null, 2);
                const blob = new Blob([jsonString], { type: 'application/json' });
                const fileUrl = URL.createObjectURL(blob);

                // Обновляем содержимое
                testDescription.innerHTML = `
                    <div id="history-btn-container"></div>
                    <h2>${config.name}</h2>
                    ${configDescription}
                    <div id=btn-container class="btn-container"></div>
                    <a href="${fileUrl}" download="${config.name}" class="export-btn">Экспорт</a>
                `;
                
                document.getElementById('history-btn-container').appendChild(historyBtn);
                document.getElementById('btn-container').appendChild(runBtn);
                document.getElementById('btn-container').appendChild(deleteConfigBtn);

            }

            //Получение конфигов ко всем тестам
            async function getConfigsToAllTests() {
                for (let j = 0; j < tests.length; j++) {
                    let test = tests[j]
                    try {
                        const formData = new FormData();
                        formData.append('testName', test.name);

                        const response = await fetch('/home/tests/configsToTest', {
                        method: 'POST', 
                        body: formData
                        })


                        if (!response.ok) {
                            throw new Error('Ошибка при загрузке конфигов к тесту');
                        }
                        let configs = await response.json();
                        if (configs === null){
                            configs = []
                        }

                        for (let i = 0; i < configs.length; i++) {
                            let config = configs[i]
                            const config_ul = document.querySelector(`.test-list li[data-id="${config.test_name}"] .config-list`);

                            const configLi = document.createElement('li');
                            configLi.className = 'config-item';
                            configLi.dataset.id = config.id;
                            configLi.textContent = config.name;
                            configLi.addEventListener('click', (e) => {
                                e.stopPropagation();
                                showConfigDescription(config);
                            });
                            config_ul.appendChild(configLi)
                            
                        }  
                    } catch (error) {
                        console.error('Ошибка:', error);
                        testDescription.innerHTML = `<p style="color: red;">Ошибка при загрузке конфигов к тесту: ${error.message}</p>`;
                    }
                        
                } 
            }

            //Получаем список логов к конфигу
            async function getHistoryToConfig(configId) {
                document.getElementById('logDetails').innerHTML = '<p>Выберите лог для просмотра деталей.</p>';
                document.getElementById('logDescription').innerHTML = ''
                while (logList.firstChild) {
                    logList.removeChild(logList.firstChild);
                }

                try {
                    const formData = new FormData();
                    formData.append('config_id', configId);
                    // Отправляем POST-запрос
                    const response = await fetch('/home/tests/configHistory', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (!response.ok) {
                        throw new Error('Ошибка при создании теста');
                    }
                    
                    // Получаем созданный список логов с сервера
                    const logs = await response.json();

                    if (logs != null){
                        logs.forEach(log => {
                            const li = document.createElement('li');
                            const utcCreatedAt = new Date(log.created_at)
                            const createdAt = utcCreatedAt.toLocaleString('ru-RU')
                            li.className = 'log-item'
                            li.textContent = createdAt;
                            li.dataset.id = log.id;
                            li.addEventListener('click', () => showLogDescription(log));

                            let hasLogAlreadyBeenAdded = false
                            const existingLogItems = logList.querySelectorAll('.log-item');
                            if (existingLogItems != null){
                                existingLogItems.forEach(li => {
                                if (li.dataset.id === log.id){
                                    hasLogAlreadyBeenAdded = true
                                }
                                });
                            }

                            if (hasLogAlreadyBeenAdded === false){
                                logList.appendChild(li)
                            }
                        });
                    }
                                    
                } catch (error) {
                    console.error('Ошибка:', error);
                }

                logModal.style.display = 'block';

            }


            // Обработчик нажатия кнопки "Новый тест"
            newTestBtn.addEventListener('click', function() {
                newTestModal.style.display = 'block';
            });
            
            //Закрыть окно с историей
            function closeLogModal() {
                document.getElementById('logModal').style.display = 'none';
            }

            // Закрытие окна с историей из logModal
            window.addEventListener('click', function(event) {
                if (event.target === logModal) {
                    document.getElementById('logModal').style.display = 'none';
                }
            });

            // Назначение обработчика события на крестик закрытия
            document.querySelector('.closeLogModal').addEventListener('click', closeLogModal);

            function showLogDescription(log) {
                // Удалить активный класс у всех элементов
                document.querySelectorAll('.log-item').forEach(item => {
                    item.classList.remove('active');
                });
                
                const logLi = document.querySelector(`.log-list li[data-id="${log.id}"]`)
                logLi.classList.add('active');

                const utcCreatedAt = new Date(log.created_at)
                const createdAt = utcCreatedAt.toLocaleString('ru-RU')
                const output = log.output

                const blob = new Blob([output], { type: 'text/plain' });
                const fileUrl = URL.createObjectURL(blob);

                const downloadName = `log_output_${log.config_id}.txt`;
                // Формируем HTML для отображения
                const logDetailsHTML = `
                    <a href="${fileUrl}" download="${downloadName}" class="download-btn">Скачать лог</a>
                    <p><strong>Дата:</strong> ${createdAt}</p>
                    <p><strong>Вывод:</strong> ${output.replace(/\n/g, '<br>')}</p>
                `;

    
                // Вставляем сформированный HTML в элемент logDetails
                document.getElementById('logDescription').innerHTML = logDetailsHTML;
            }

            //Открываем форму с информацией об удаленном сервере
            async function openRunModal(config){
                configToRun = config;
                serverModal.style.display = 'block';
            }

            //Запуск теста
            serverForm.addEventListener('submit', async function(e) {
                serverModal.style.display = 'none';
                e.preventDefault();
                try {
                    const formData = new FormData();
                    const serverIp = document.getElementById('serverIp').value;
                    const username = document.getElementById('username').value;
                    const commandTemplate = document.getElementById('commandTemplate').value;

                    formData.append('config_id', configToRun.id);
                    formData.append('server_ip', serverIp);
                    formData.append('commandTemplate', commandTemplate);
                    formData.append('username', username);

                    const response = await fetch('/home/tests/runTest', {
                        method: 'POST', 
                        body: formData
                    })


                    if (!response.ok) {
                        const errorResponse = await response.json();
                        throw new Error(`Ошибка при запуске теста: ${errorResponse.error}`);
                    }
                } catch (error) {
                    console.error('Ошибка:', error);
                    testDescription.innerHTML = `<p style="color: red;">Ошибка при запуске теста: ${error.message}</p>`;
                }


            })

            // Закрытие serverModal
            closeServerModalBtn.addEventListener('click', function() {
                serverModal.style.display = 'none';
            });

            // Закрытие при клике вне формы с из serverModal
            window.addEventListener('click', function(event) {
                if (event.target === serverModal) {
                    serverModal.style.display = 'none';
                }
            });

            // Открытие модального окна с подтверждением удаления конфига
            async function openDeleteConfigModal(configId){
                deleteConfigModal.style.display = 'block';
                deleteConfigModal.dataset.configId = configId;
            }


            //Удаление конфига
            deleteConfigForm.addEventListener('submit', async function(e) {
                deleteConfigModal.style.display = 'none';
                e.preventDefault();
                const configId = deleteConfigModal.dataset.configId;
                try {
                    const formData = new FormData();
                    formData.append('config_id', configId);

                    const response = await fetch('/home/tests/deleteConfig', {
                        method: 'POST', 
                        body: formData
                    })

                    if (!response.ok) {
                        throw new Error('Ошибка при удалении конфига на сервере');
                    }

                    const configLi = document.querySelector(`.test-list .config-list li[data-id="${configId}"]`);
                    configLi.remove()
                    testDescription.innerHTML = '';
                } catch (error) {
                    console.error('Ошибка:', error);
                    testDescription.innerHTML = `<p style="color: red;">Ошибка при удалении конфига: ${error.message}</p>`;
                }

            })

            // Открытие модального окна с подтверждением удаления теста
            async function openDeleteTestModal(testName){
                deleteTestModal.style.display = 'block';
                deleteTestModal.dataset.testName = testName;
            }


            //Удаление теста
            deleteTestForm.addEventListener('submit', async function(e) {
                e.preventDefault()
                deleteTestModal.style.display = 'none';
                const testName = deleteTestModal.dataset.testName;
                try {
                    const formData = new FormData();
                    formData.append('test_name', testName);

                    const response = await fetch('/home/tests/deleteTest', {
                        method: 'POST', 
                        body: formData
                    })

                    if (!response.ok) {
                        throw new Error('Ошибка при удалении теста');
                    }

                    const configLi = document.querySelector(`.test-list li[data-id="${testName}"]`);
                    configLi.remove()
                    testDescription.innerHTML = '';
                } catch (error) {
                    console.error('Ошибка:', error);
                    testDescription.innerHTML = `<p style="color: red;">Ошибка при удалении теста: ${error.message}</p>`;
                }

            })


            // Инициализация страницы - загрузка тестов и конфигов к ним
            fetchTests();
                     
        });

    </script>
</body>
</html>